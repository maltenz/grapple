 # Signed User
 extend type Query {
  signUser: SignUser!
}

type SignUser {
  id: ID
  userId: ID!
  name: String!
  email: String!
}

extend type Mutation {
  updateSignUser(input: SignUserInput!): SignUser
}

input SignUserInput {
  id: ID
  userId: ID
  name: String
  email: String
}

fragment signUserData on SignUser {
  id
  __typename
  userId @client
  name @client
  email @client
}

mutation UpdateSignUser($input: SignUserInput!) {
  updateSignUser(input: $input) @client {
    userId @client
    name @client
    email @client
  }
}

query GetSignUser {
  signUser @client {
    id
    __typename
    userId @client
    name @client
    email @client
  }
}

 # Pager
 extend type Query {
  pager: Pager!
}

type Pager {
  id: ID
  activeIndex: Int!
  count: Int!
  visible: Boolean
}

extend type Mutation {
  updatePager(input: PagerInput!): Pager
}

input PagerInput {
  activeIndex: Int!
  count: Int!
  visible: Boolean
}

fragment pagerData on Pager {
  id
  __typename
  activeIndex @client
  count @client
  visible @client
}

mutation UpdatePager($input: PagerInput!) {
  updatePager(input: $input) @client {
    activeIndex
    count
    visible
  }
}

query GetPager {
  pager @client {
    id
    __typename
    activeIndex
    count
    visible
  }
}

# PullModal
 extend type Query {
  pullModal: PullModal!
}

type PullModal {
  id: ID
  visible: Boolean
}

extend type Mutation {
  updatePullModal(input: PullModalInput!): PullModal
}

input PullModalInput {
  visible: Boolean
}

fragment pullModalData on PullModal {
  id
  __typename
  visible @client
}

mutation UpdatePullModal($input: PullModalInput!) {
  updatePullModal(input: $input) @client {
    visible
  }
}

query GetPullModal {
  pullModal @client {
    id
    __typename
    visible
  }
}